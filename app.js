import express from 'express';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer';
import pg from 'pg';

// ‚úÖ Bet√∂ltj√ºk a k√∂rnyezeti v√°ltoz√≥kat
dotenv.config();

// ‚úÖ Express alkalmaz√°s inicializ√°l√°sa
const app = express();
const port = process.env.PORT || 3000;

// ‚úÖ Iframe t√°mogat√°s systeme.io-hoz
app.use((req, res, next) => {
    res.setHeader("X-Frame-Options", "ALLOWALL");
    res.setHeader("Content-Security-Policy", "frame-ancestors 'self' https://systeme.io https://*.systeme.io");
    next();
});

// ‚úÖ Middleware be√°ll√≠t√°sok
app.set('view engine', 'ejs');
app.set('views', './views');
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));

// ‚úÖ PostgreSQL kapcsolat Renderhez
const pool = new pg.Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// ‚úÖ Alap√©rtelmezett route (f≈ëoldal)
app.get("/", (req, res) => {
    res.render("index");
});

// ‚úÖ PostgreSQL kapcsolat tesztel√©se
(async () => {
    try {
        const res = await pool.query('SELECT NOW()');
        console.log('‚úÖ PostgreSQL kapcsolat akt√≠v:', res.rows[0].now);
    } catch (error) {
        console.error('‚ùå PostgreSQL kapcsolat sikertelen:', error);
        process.exit(1);
    }
})();

// ‚úÖ AJAX-alap√∫ ≈±rlap bek√ºld√©s
app.post('/submit-form', async (req, res) => {
    try {
        console.log('üì• Be√©rkezett ≈±rlap:', req.body);

        let {
            destination, peopleCount, childrenAge, departureDate, returnDate,
            duration, travelMethod, accommodationType, mealPlan, extraNeeds,
            budget, contactName, contactEmail, contactPhone
        } = req.body;

        if (!destination || !peopleCount || !departureDate || !returnDate || !budget || !contactEmail) {
            return res.status(400).json({ success: false, error: "üö® Hi√°nyz√≥ k√∂telez≈ë mez≈ëk!" });
        }

        budget = budget.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ".");

        const query = `
            INSERT INTO requests (
                destination, peopleCount, childrenAge, departureDate, returnDate, 
                duration, travelMethod, accommodationType, mealPlan, extraNeeds, 
                budget, contactName, contactEmail, contactPhone
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
        `;
        await pool.query(query, [
            destination, peopleCount, childrenAge, departureDate, returnDate,
            duration, travelMethod, accommodationType, mealPlan, extraNeeds,
            budget, contactName, contactEmail, contactPhone
        ]);

        console.log('‚úÖ Adatok sikeresen mentve az adatb√°zisba.');

        // ‚úÖ E-mail k√ºld√©s
        await sendUserEmail(contactName, contactEmail, destination, peopleCount, budget, departureDate, returnDate);
        await sendAdminEmail(destination, peopleCount, childrenAge, departureDate, returnDate, duration, travelMethod, accommodationType, mealPlan, extraNeeds, budget, contactName, contactEmail, contactPhone);

        res.json({ success: true }); // ‚úÖ AJAX v√°lasz
    } catch (error) {
        console.error('‚ùå Hiba az ≈±rlap feldolgoz√°sa sor√°n:', error);
        res.status(500).json({ success: false });
    }
});

// ‚úÖ "K√∂sz√∂nj√ºk" oldal AJAX-szal
app.get('/thankyou', (req, res) => {
    res.render('thankyou');
});

// ‚úÖ E-mail k√ºld√©s funkci√≥
async function sendEmail(to, subject, text) {
    try {
        const transporter = nodemailer.createTransport({
            host: "smtp.gmail.com",
            port: 587,
            secure: false,
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD
            }
        });

        await transporter.sendMail({
            from: `"Utaz√≥k K√©zik√∂nyve" <${process.env.EMAIL_USER}>`,
            to,
            subject,
            text
        });

        console.log(`‚úÖ Email elk√ºldve: ${subject}`);
    } catch (error) {
        console.error(`‚ùå Hiba az email k√ºld√©sekor: ${error}`);
    }
}

// ‚úÖ Felhaszn√°l√≥i e-mail k√ºld√©se
async function sendUserEmail(name, email, destination, peopleCount, budget, departureDate, returnDate) {
    const text = `Kedves ${name}!\n\n
K√∂sz√∂nj√ºk, hogy az Utaz√≥k K√©zik√∂nyv√©t v√°lasztotta!\n
Az aj√°nlatk√©r√©s r√©szletei:\n
- √ötic√©l: ${destination}
- Utaz√≥k sz√°ma: ${peopleCount}
- K√∂lts√©gkeret: ${budget} Ft
- Id≈ëszak: ${departureDate} - ${returnDate}\n
Csapatunk hamarosan felveszi √ñnnel a kapcsolatot.\n
√údv√∂zlettel,\nUtaz√≥k K√©zik√∂nyve Csapata`;

    await sendEmail(email, "K√∂sz√∂nj√ºk az aj√°nlatk√©r√©st!", text);
}

// ‚úÖ Admin e-mail k√ºld√©se
async function sendAdminEmail(destination, peopleCount, childrenAge, departureDate, returnDate, duration, travelMethod, accommodationType, mealPlan, extraNeeds, budget, contactName, contactEmail, contactPhone) {
    const text = `√öj aj√°nlatk√©r√©s √©rkezett:\n
- √ötic√©l: ${destination}
- Utaz√≥k sz√°ma: ${peopleCount}
- Gyermekek √©letkora: ${childrenAge}
- Id≈ëszak: ${departureDate} - ${returnDate}
- Id≈ëtartam: ${duration} nap
- Utaz√°s m√≥dja: ${travelMethod}
- Sz√°ll√°s t√≠pusa: ${accommodationType}
- Ell√°t√°s t√≠pusa: ${mealPlan}
- Extra ig√©nyek: ${extraNeeds}
- Kapcsolattart√≥ neve: ${contactName}
- E-mail: ${contactEmail}
- Telefonsz√°m: ${contactPhone}`;

    await sendEmail(process.env.EMAIL_USER, "√öj aj√°nlatk√©r√©s √©rkezett!", text);
}

// ‚úÖ Szerver ind√≠t√°sa
app.listen(port, () => {
    console.log(`üöÄ Szerver fut: http://localhost:${port}`);
});

// ‚úÖ Keep-Alive a Render miatt
app.get('/keep-alive', (req, res) => {
    console.log('üîÑ Keep-Alive h√≠v√°s √©rkezett.');
    res.send('Server is running');
});

setInterval(() => {
    console.log('üîÑ Keep-Alive ping...');
}, 30000);
