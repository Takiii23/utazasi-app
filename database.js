import pkg from 'pg';
import dotenv from 'dotenv';

dotenv.config(); // K√∂rnyezeti v√°ltoz√≥k bet√∂lt√©se

const { Pool } = pkg;

// **F√ºggv√©ny az √∫j adatb√°zis kapcsolat l√©trehoz√°s√°ra**
function createPool() {
    return new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: { rejectUnauthorized: false }
    });
}

let pool = createPool(); // Els≈ëdleges kapcsolat

// **Adatb√°zis inicializ√°l√°sa**
async function initializeDatabase() {
    const createTableQuery = `
        CREATE TABLE IF NOT EXISTS requests (
            id SERIAL PRIMARY KEY,
            destination VARCHAR(255) NOT NULL,
            peopleCount INT NOT NULL,
            childrenAge TEXT,
            departureDate DATE NOT NULL,
            returnDate DATE NOT NULL,
            duration INT NOT NULL,
            travelMethod VARCHAR(100),
            accommodationType VARCHAR(100),
            mealPlan VARCHAR(100),
            extraNeeds TEXT,
            budget VARCHAR(50),
            contactName VARCHAR(255) NOT NULL,
            contactEmail VARCHAR(255) NOT NULL,
            contactPhone VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    `;

    try {
        await pool.query(createTableQuery);
        console.log('‚úÖ Az adatb√°zis t√°bla ellen≈ërizve vagy l√©trehozva!');
    } catch (error) {
        console.error('‚ùå Hiba a t√°bla l√©trehoz√°sakor:', error);
    }
}

// **Keep-Alive mechanizmus**
async function checkDatabaseConnection() {
    try {
        const res = await pool.query('SELECT NOW()');
        console.log('‚úÖ PostgreSQL kapcsolat akt√≠v:', res.rows[0].now);
    } catch (error) {
        console.error('‚ùå PostgreSQL kapcsolat ellen≈ërz√©se sikertelen:', error);
    }
}

// **Hibakezel√©s - automatikus √∫jracsatlakoz√°s**
pool.on('error', async (err) => {
    console.error('‚ùå PostgreSQL kapcsolat megszakadt:', err);
    console.log('üîÑ √öjracsatlakoz√°s...');

    try {
        pool = createPool(); // **√öj kapcsolat l√©trehoz√°sa**
        await checkDatabaseConnection();
        console.log('‚úÖ √öjracsatlakoz√°s sikeres!');
    } catch (reconnectError) {
        console.error('‚ö†Ô∏è √öjracsatlakoz√°s sikertelen:', reconnectError);
    }
});

// **Szerver ind√≠t√°sakor futtatott ellen≈ërz√©sek**
(async () => {
    try {
        console.log('üîç PostgreSQL kapcsolat tesztel√©se...');
        await checkDatabaseConnection();
        await initializeDatabase();

        const res = await pool.query('SELECT COUNT(*) FROM requests;');
        console.log('üìä Adatok a requests t√°bl√°b√≥l:', res.rows[0].count);
    } catch (error) {
        console.error('‚ùå Nem siker√ºlt csatlakozni az adatb√°zishoz:', error);
    }
})();

// **Keep-Alive mechanizmus id≈ëz√≠t√©se**
setInterval(checkDatabaseConnection, 60000); // 60 mp-k√©nt ellen≈ërizz√ºk

export default pool;
